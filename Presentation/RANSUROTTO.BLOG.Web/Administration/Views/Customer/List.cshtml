@model CustomerListModel

@using System.Globalization;
@using RANSUROTTO.BLOG.Core.Domain.Common.Setting
@using RANSUROTTO.BLOG.Core.Infrastructure

@{
    var defaultGridPageSize = EngineContext.Current.Resolve<AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<AdminAreaSettings>().GridPageSizes;

    //页面标题
    ViewBag.Title = T("Admin.Customers.Customers").Text;
    //当前选中节点项系统名称
    Html.SetActiveMenuItemSystemName("Customers list");
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @T("Admin.Customers.Customers")
        </h1>
        <div class="pull-right">
            <a href="@Url.Action("Create")" class="btn bg-blue">
                <i class="fa fa-plus-square"></i>
                @T("Admin.Common.AddNew")
            </a>
            <div class="btn-group">
                <button type="button" class="btn btn-success">
                    <i class="fa fa-download"></i>
                    @T("Admin.Common.Export")
                </button>
                <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                    <span class="caret"></span>
                    <span class="sr-only">&nbsp;</span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <button type="submit" name="exportxml-all">
                            <i class="fa fa-file-code-o"></i>
                            @T("Admin.Common.ExportToXml.All")
                        </button>
                    </li>
                    <li>
                        <button type="button" id="exportxml-selected">
                            <i class="fa fa-file-code-o"></i>
                            @T("Admin.Common.ExportToXml.Selected")
                        </button>
                    </li>
                    <li class="divider"></li>
                    <li>
                        <button type="submit" name="exportexcel-all">
                            <i class="fa fa-file-excel-o"></i>
                            @T("Admin.Common.ExportToExcel.All")
                        </button>
                    </li>
                    <li>
                        <button type="button" id="exportexcel-selected">
                            <i class="fa fa-file-excel-o"></i>
                            @T("Admin.Common.ExportToExcel.Selected")
                        </button>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">

                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row">
                            @*Left*@
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.CustomLabelFor(model => model.SearchEmail)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.CustomEditorFor(model => model.SearchEmail)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.CustomLabelFor(model => model.SearchUsername)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.CustomEditorFor(model => model.SearchUsername)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.CustomLabelFor(model => model.SearchName)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.CustomEditorFor(model => model.SearchName)
                                    </div>
                                </div>
                                @if (Model.DateOfBirthEnabled)
                                {
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.CustomLabelFor(model => model.SearchDayOfBirth)
                                        </div>
                                        <div class="col-md-8">
                                            @{
                                                var monthOfBirthValues = new List<SelectListItem>();
                                                monthOfBirthValues.Add(new SelectListItem { Text = T("Admin.Customers.Customers.List.SearchDateOfBirth.Month").Text, Value = "0" });
                                                for (int i = 1; i <= 12; i++)
                                                {
                                                    monthOfBirthValues.Add(new SelectListItem { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
                                                }

                                                var dayOfBirthValues = new List<SelectListItem>();
                                                dayOfBirthValues.Add(new SelectListItem { Text = T("Admin.Customers.Customers.List.SearchDateOfBirth.Day").Text, Value = "0" });
                                                for (int i = 1; i <= 31; i++)
                                                {
                                                    dayOfBirthValues.Add(new SelectListItem { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
                                                }
                                            }
                                            <div class="row">
                                                <div class="col-md-6">
                                                    @Html.CustomDropDownListFor(model => model.SearchMonthOfBirth, monthOfBirthValues)
                                                </div>
                                                <div class="col-md-6">
                                                    @Html.CustomDropDownListFor(model => model.SearchDayOfBirth, dayOfBirthValues)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>

                            @*Right*@
                            <div class="col-md-7">
                                @if (Model.CompanyEnabled)
                                {
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.CustomLabelFor(model => model.SearchCompany)
                                        </div>
                                        <div class="col-md-8">
                                            @Html.CustomEditorFor(model => model.SearchCompany)
                                        </div>
                                    </div>
                                }
                                @if (Model.PhoneEnabled)
                                {
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.CustomLabelFor(model => model.SearchPhone)
                                        </div>
                                        <div class="col-md-8">
                                            @Html.CustomEditorFor(model => model.SearchPhone)
                                        </div>
                                    </div>
                                }
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.CustomLabelFor(model => model.SearchIpAddress)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.CustomEditorFor(model => model.SearchIpAddress)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.CustomLabelFor(model => model.SearchCustomerRoleIds)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.SearchCustomerRoleIds, new { SelectList = Model.AvailableCustomerRoles })
                                        <script>
                                $(document).ready(function() {
                                    var rolesIdsInput = $('#@Html.FieldIdFor(model => model.SearchCustomerRoleIds)')
                                        .data("kendoMultiSelect");
                                    rolesIdsInput.setOptions({
                                        autoClose: false
                                    });

                                    @if (Model.AvailableCustomerRoles.Count == 0)
                                    {
                                        <text>
                                            rolesIdsInput.setOptions({
                                                enable: false,
                                                placeholder:
                                                    '@T("Admin.Catalog.Products.CustomerRoles.NoCustomerRolesAvailable")'
                                            });
                                            rolesIdsInput._placeholder();
                                            rolesIdsInput._enable();
                                        </text>
                                    }
                                });
                                        </script>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-7 col-md-offset-5">
                                <button type="button" id="search-customers" class="btn btn-primary btn-search">
                                    <i class="fa fa-search"></i>
                                    @T("Admin.Common.Search")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-body">
                        <div id="customers-grid"></div>

                        <script>
        $(document).ready(function() {
            $("#customers-grid").kendoGrid({
                dataSource: {
                    type: "json",
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("CustomerList", "Customer"))",
                            type: "POST",
                            dataType: "json",
                            data: additionalData
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors"
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        this.cancelChanges();
                    },
                    pageSize: @(defaultGridPageSize),
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    pageSizes: [@(gridPageSizes)],
                    @Html.Partial("_GridPagerMessages")
                },
                scrollable: false,
                dataBound: onDataBound,
                columns: [
                    {
                        field: "Id",
                        headerTemplate: "<input id='mastercheckbox' type='checkbox'/>",
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: "<input type='checkbox' value='#=Id#' class='checkboxGroups'/>",
                        width: 50
                    }, {
                        field: "Email",
                        title: "@T("Admin.Customers.Customers.Fields.Email")",
                        width: 200
                    },
                    {
                        field: "Username",
                        title: "@T("Admin.Customers.Customers.Fields.Username")",
                        width: 200
                    },
                    {
                        field: "Name",
                        title: "@T("Admin.Customers.Customers.Fields.Name")",
                        width: 200
                    }, {
                        field: "CustomerRoleNames",
                        title: "@T("Admin.Customers.Customers.Fields.CustomerRoles")",
                        width: 200
                    },
                    @if (Model.CompanyEnabled)
                    {
                        <text>{
                        field: "Company",
                        title: "@T("Admin.Customers.Customers.Fields.Company")",
                        width: 200
                    },</text>
                    }
                    @if (Model.PhoneEnabled)
                    {
                        <text>{
                        field: "Phone",
                        title: "@T("Admin.Customers.Customers.Fields.Phone")",
                        width: 200
                    },</text>
                    }
                    {
                        field: "Active",
                        title: "@T("Admin.Customers.Customers.Fields.Active")",
                        width: 100,
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template:
                            '# if(Active) {# <i class="fa fa-check true-icon"></i> #} else {# <i class="fa fa-close false-icon"></i> #} #'
                    }, {
                        field: "CreatedOn",
                        title: "@T("Admin.Customers.Customers.Fields.CreatedOn")",
                        width: 200,
                        type: "date",
                        format: "{0:G}"
                    }, {
                        field: "LastActivityDate",
                        title: "@T("Admin.Customers.Customers.Fields.LastActivityDate")",
                        width: 200,
                        type: "date",
                        format: "{0:G}"
                    }, {
                        field: "Id",
                        title: "@T("Admin.Common.Edit")",
                        width: 50,
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template:
                            '<a class="btn btn-default" href="Edit/#=Id#"><i class="fa fa-pencil"></i>@T("Admin.Common.Edit")</a>'
                    }
                ]
            });
        });
                        </script>

                        <script type="text/javascript">
        var selectedIds = [];

        $(document).ready(function() {

            $('#search-customers').click(function() {
                var grid = $('#customers-grid').data('kendoGrid');
                grid.dataSource.page(1);

                $('.checkboxGroups').attr('checked', false).change();
                selectedIds = [];
                return false;
            });

            $("".concat("#@Html.FieldIdFor(model => model.SearchEmail),",
                "#@Html.FieldIdFor(model => model.SearchUsername),",
                "#@Html.FieldIdFor(model => model.SearchName),",
                "#@Html.FieldIdFor(model => model.SearchCompany),",
                "#@Html.FieldIdFor(model => model.SearchPhone),",
                "#@Html.FieldIdFor(model => model.SearchIpAddress)")).keydown(function(event) {
                if (event.keyCode === 13) {
                    $("#search-customers").click();
                    return false;
                }
            });

            $('#mastercheckbox').click(function() {
                $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
            });

            $('#customers-grid').on('change',
                'input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]',
                function(e) {
                    var $check = $(this);
                    if ($check.is(":checked") == true) {
                        var checked = jQuery.inArray($check.val(), selectedIds);
                        if (checked == -1) {
                            //add id to selectedIds.
                            selectedIds.push($check.val());
                        }
                    } else {
                        var checked = jQuery.inArray($check.val(), selectedIds);
                        if (checked > -1) {
                            //remove id from selectedIds.
                            selectedIds = $.grep(selectedIds,
                                function(item, index) {
                                    return item != $check.val();
                                });
                        }
                    }
                    updateMasterCheckbox();
                });

        });

        function onDataBound(e) {
            $('#customers-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').each(
                function() {
                    var currentId = $(this).val();
                    var checked = jQuery.inArray(currentId, selectedIds);
                    $(this).attr('checked', checked > -1);
                });

            updateMasterCheckbox();
        }

        function updateMasterCheckbox() {
            var numChkBoxes =
                $('#customers-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').length;
            var numChkBoxesChecked =
                $('#customers-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]:checked')
                    .length;
            $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
        }

        function additionalData() {
            var data = {
                SearchCustomerRoleIds: $('#@Html.FieldIdFor(model => model.SearchCustomerRoleIds)').val(),
                SearchEmail: $('#@Html.FieldIdFor(model => model.SearchEmail)').val(),
                SearchUsername: $('#@Html.FieldIdFor(model => model.SearchUsername)').val(),
                SearchName: $('#@Html.FieldIdFor(model => model.SearchName)').val(),
                SearchDayOfBirth: $('#@Html.FieldIdFor(model => model.SearchDayOfBirth)').val(),
                SearchMonthOfBirth: $('#@Html.FieldIdFor(model => model.SearchMonthOfBirth)').val(),
                SearchCompany: $('#@Html.FieldIdFor(model => model.SearchCompany)').val(),
                SearchPhone: $('#@Html.FieldIdFor(model => model.SearchPhone)').val(),
                SearchIpAddress: $('#@Html.FieldIdFor(model => model.SearchIpAddress)').val()
            };
            addAntiForgeryToken(data);
            return data;
        }
                        </script>

                    </div>
                </div>

            </div>
        </div>
    </div>

}